#!/usr/bin/env bash

paths=(
  ~/Documents/Projects
  ~/Documents/Work
  ~/Documents/Work/Archive
  ~/Documents/Code
  ~/Documents/Talks
)

list_projects() {
  ls -1 "${paths[@]}" | grep -v Archive | sed -E "/^.*:$|^$/d" | sort
}

open_project() {
  project="$*"

  for path in ${paths[*]}; do
    if [ -d "$path/$project" ]; then
      pushd "$path/$project" > /dev/null || return
      tm
      popd > /dev/null || return
      break
    fi
  done
}

new_project() {
  local type=$2
  local project_name=${*:3}

  if [[ -z "${project_name// }" ]]; then
    echo "Supply a project name"
    exit 1
  fi

  case $type in
    "project")
      pushd ~/Documents/Projects || exit 1
      ;;
    "work")
      pushd ~/Documents/Work || exit 1
      ;;
    "talk")
      pushd ~/Documents/Talks || exit 1
      ;;
    *)
      echo "\"$type\" is not a valid type of project, supported types: "
      echo "work | project | talk"
      exit 1
      ;;
  esac

  mkdir "$project_name"
  pushd "$project_name" || exit 1

  touch Worklog.md
  mkdir Code

  tm

  popd > /dev/null || exit 1
}

choose() {
  local project

  project=$(list_projects | fzf --prompt="project > " --reverse)

  if [[ -z "$project" ]]; then
    exit 0
  fi

  open_project "$project"
}

usage() {
  echo "Manage projects, usage:"
  echo
  echo "  p project               open existing project"
  echo "  p --ls                  list all projects"
  echo "  p --new type project    create new project, type = project | work | talk"
  echo
  exit 0
}

main() {
  if [ -z "$1" ]; then
    choose
    return
  fi

  case "$1" in
    "--new")
      new_project "$@"
      ;;
    "--list"|"--ls")
      list_projects
      ;;
    "--help"|"-h")
      usage
      ;;
    *)
      open_project "$@"
      ;;
  esac
  shift
}

main "$@"
